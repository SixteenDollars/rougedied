{"version":3,"sources":["resources/images/apple-music.png","resources/images/spotify.png","resources/images/tidal.png","resources/images/pandora.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","size","id","url","playing","title","src","width","height","frameBorder","allowtransparency","href","apple","alt","spotify","pandora","tidal","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,uSCqD5BC,E,iLA3Cb,IACMC,EACE,MADFA,EAEG,IAIT,OACI,6BACJ,uBAAGC,GAAG,SAAN,wBACA,kBAAC,IAAD,CACCA,GAAG,oBACHC,IAAI,sDACJC,SAAO,IACR,uBAAGF,GAAG,UAAN,yDACA,4BACCG,MAAM,UACAH,GAAG,iBACHI,IAAG,yCAlBE,uCAkBF,iBAbK,OAaL,kBAZM,SAaTC,MAAON,EACPO,OAAQP,EACRQ,YAAY,IACZC,kBAAkB,SAEvB,uBAAGC,KAAK,gFACP,yBAAKT,GAAG,QAAQI,IAAKM,IAAOC,IAAI,MAEjC,uBAAGF,KAAK,yDACP,yBAAKT,GAAG,UAAUI,IAAKQ,IAASD,IAAI,MAErC,uBAAGF,KAAK,qGACP,yBAAKT,GAAG,UAAUI,IAAKS,IAASF,IAAI,MAErC,uBAAGF,KAAK,4CACP,yBAAKT,GAAG,QAAQI,IAAKU,IAAOH,IAAI,W,GApCnBI,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.1a357114.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/apple-music.24451496.png\";","module.exports = __webpack_public_path__ + \"static/media/spotify.2d17c16d.png\";","module.exports = __webpack_public_path__ + \"static/media/tidal.ae042daa.png\";","module.exports = __webpack_public_path__ + \"static/media/pandora.4d4c4b84.png\";","import ReactPlayer from 'react-player'\nimport React, { Component } from 'react'\nimport './App.css';\nimport apple from './resources/images/apple-music.png'\nimport spotify from './resources/images/spotify.png'\nimport tidal from './resources/images/tidal.png'\nimport pandora from './resources/images/pandora.png'\n\nclass App extends Component {\n\trender() {\n\t\tconst uri = \"spotify:album:6ITBoE1l1zPCtXKOTN12IC\";\n\t\tconst size = {\n\t\t\twidth: '30%',\n\t\t\theight: 350\n\t\t  };\n\t\t  const view = 'list'; // or 'coverart'\n\t\t  const theme = 'black'; // or 'white'\n\t\treturn (\n      <div>\n\t\t<p id=\"title\">STOP tweakin' (2018)</p>\n\t\t<ReactPlayer \n\t\t\tid=\"soundcloud-player\" \n\t\t\turl='https://soundcloud.com/rougeisdead/sets/stoptweakin' \n\t\t\tplaying />\n\t\t<p id=\"title1\">F**KMONDAY's (from LoveHart Compilation Album) (2019)</p>\n\t\t<iframe\n\t\t\ttitle=\"spotify\"\n        \tid=\"spotify-player\"\n        \tsrc={`https://embed.spotify.com/?uri=${uri}&view=${view}&theme=${theme}`}\n        \twidth={size.width}\n        \theight={size.height}\n        \tframeBorder=\"0\"\n        \tallowtransparency=\"true\"\n      \t/>\n\t\t  <a href=\"https://geo.music.apple.com/us/album/_/1460176267?mt=1&app=music&at=1000lHKX\">\n\t\t\t  <img id=\"apple\" src={apple} alt=\"\"></img>\n\t\t  </a>\n\t\t  <a href=\"https://open.spotify.com/album/6ITBoE1l1zPCtXKOTN12IC\">\n\t\t\t  <img id=\"spotify\" src={spotify} alt=\"\"></img>\n\t\t  </a>\n\t\t  <a href=\"https://www.pandora.com/artist/various-artists/love-hart-presents-hartfm-explicit/AL2V7Pb7xcg7p74\">\n\t\t\t  <img id=\"pandora\" src={pandora} alt=\"\"></img>\n\t\t  </a>\n\t\t  <a href=\"https://listen.tidal.com/album/107846023\">\n\t\t\t  <img id=\"tidal\" src={tidal} alt=\"\"></img>\n\t\t  </a>\n\n\n      </div>\n\n\t\t);\n\t}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}